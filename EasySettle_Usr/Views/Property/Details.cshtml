@model EasySettle.Models.Property

@{
    ViewData["Title"] = "Details";
}
<head>
    <title>Property Details with Map</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <style>
        /* Set the size of the div element that contains the map */
        #map {
            height: 400px; /* The height is 400 pixels */
            width: 100%; /* The width is the width of the web page */
        }
    </style>
</head>

<body>
    <h1>Details</h1>

    <div>
        <h4>Property</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Street)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Street)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.City)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.City)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.ZipCode)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.ZipCode)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Type)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Type)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Rooms)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Rooms)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Rent)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Rent)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Rented)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Rented)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Owner)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Owner.OwnerID)
            </dd>
        </dl>
        <a asp-controller="Property" asp-action="OpenGmailCompose" asp-route-propertyId="@Model.PropertyID" asp-route-draft="Property address: @(Model.Street), @(Model.City), @(Model.ZipCode)" class="btn btn-primary">Send Email</a>
    </div>
    <div>
        <h1> </h1>
    </div>


    <!-- Map container -->
    <div id="map"></div>

    <div>
        <a asp-action="Edit" asp-route-id="@Model?.PropertyID">Edit</a> |
        <a asp-action="Index">Back to List</a>
    </div>

    <script>
        let map;

        function initMap() {
            const address = "@Model.Street, @Model.City, @Model.ZipCode"; // Construct address from property model data
            const geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'address': address }, function(results, status) {
                if (status === 'OK') {
                    const location = results[0].geometry.location;
                    map = new google.maps.Map(document.getElementById("map"), {
                        zoom: 14,
                        center: location,
                    });

                    const contentString =
                        '<div id="content">' +
                        '<div id="siteNotice">' +
                        "</div>" +
                        '<h1 id="firstHeading" class="firstHeading">Address: @Model.Street</h1>' +
                        "</div>";

                    const infowindow = new google.maps.InfoWindow({
                        content: contentString,
                        ariaLabel: "Address: @Model.Street",
                    });

                    const marker = new google.maps.Marker({
                        position: location,
                        map,
                        title: "Address: @Model.Street",
                    });

                    marker.addListener("click", () => {
                        infowindow.open(map, marker);
                    });
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

        window.initMap = initMap;
    </script>

    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCZ1VFUiJ586zyA1iE-6vCBXJvluk_xusQ&callback=initMap"></script>
</body>
