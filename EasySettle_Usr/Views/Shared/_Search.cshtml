@using EasySettle.Models


@functions{

    private string GetMinValue(SearchCriteria criteria, string propertyName)
    {
        if (criteria == null) return ""; 

        switch (propertyName)
        {
            case "Rooms":
                return criteria.MinRooms?.ToString() ?? "";
            case "BathRooms":
                return criteria.MinBathRooms?.ToString() ?? "";
            case "Rent":
                return criteria.MinRent?.ToString() ?? "";
            default:
                return "";
        }
    }


    private string GetMaxValue(SearchCriteria criteria, string propertyName)
    {
        if (criteria == null) return "";

        switch (propertyName)
        {
            case "Rooms":
                return criteria.MaxRooms?.ToString() ?? "";
            case "BathRooms":
                return criteria.MaxBathRooms?.ToString() ?? "";
            case "Rent":
                return criteria.MaxRent?.ToString() ?? "";
            default:
                return "";
        }
    }
}

@{
    var criteria = ViewBag.SearchCriteria as SearchCriteria;
}

@{  
    var propertyNames = new List<string> { "Rooms", "BathRooms", "Rent" };
}

<head> 
    <link rel="stylesheet" href="~/css/category.css" >  
</head>
<body>

    <form method="post" asp-controller="Home" asp-action="CombinedSearch">
        <nav class="navbar bg-body pb-5">
            <div class="container-fluid d-flex justify-content-between">
                <div class="d-flex flex-grow-1 col-lg-6"> 
                    @foreach (var propertyName in propertyNames)
                    {
                    <div class="dropdown">
                        <button class="btn btn-outline-warning m-1 dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            @propertyName
                        </button>          
                        <ul class="dropdown-menu p-2">
                            <li>
                                <input type="number" name="@($"Min{propertyName}")" placeholder="@($"Min {propertyName}")" value="@GetMinValue(criteria, propertyName)">
                                <input type="number" name="@($"Max{propertyName}")" placeholder="@($"Max {propertyName}")" value="@GetMaxValue(criteria, propertyName)">
                            </li>
                        </ul>
                    </div>
                    }

                @{
                    var typeSelectedValue = criteria?.Type?.ToString() ?? "";
                    var citySelectedValue = criteria?.City?.ToString() ?? "";
                    var parkingChecked = criteria?.Parking == true ? "checked" : "";
                    var petsChecked = criteria?.Pets == true ? "checked" : "";

                }

                <!-- Type Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-outline-warning m-1 dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        Type
                    </button>
                    <ul class="dropdown-menu">
                        @foreach (TypeEnum type in Enum.GetValues(typeof(TypeEnum)))
                        {
                            var typeChecked = type.ToString() == typeSelectedValue ? "checked" : "";
                            <li><input type="radio" name="Type" value="@type" @typeChecked /> @type.ToString()</li>
                        }
                    </ul>
                </div>

                <!-- City Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-outline-warning m-1 dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        City
                    </button>
                    <ul class="dropdown-menu">
                        @foreach (CityEnum city in Enum.GetValues(typeof(CityEnum)))
                        {
                            var cityChecked = city.ToString() == citySelectedValue ? "checked" : "";
                            <li><input type="radio" name="City" value="@city" @cityChecked /> @city.ToString().Replace("_", " ")</li>
                        }
                    </ul>
                </div>

                <!-- Parking Checkbox Button -->
                <div class="dropdown">
                    <button class="btn btn-outline-warning m-1" id="parkingButton" type="button">Parking</button>
                    <input type="checkbox" id="btncheck1" name="Parking" value="true" style="display: none;" @parkingChecked>
                </div>
                <!-- Pets Checkbox Button -->
                <div class="dropdown">
                    <button class="btn btn-outline-warning m-1" id="petsButton" type="button">Pets</button>
                    <input type="checkbox" id="btncheck2" name="Pets" value="true" style="display: none;" @petsChecked>
                </div>

                </div>
                <button class="btn btn-warning m-2" type="submit">Search</button>
                <a href="@Url.Action("MapSearch", "Property")" class="btn btn-warning" >MapSearch</a>

            </div>
        </nav>
    </form>



    <style>
        .category-link {
            color: black !important; /* Ensures override of default link color */
            text-decoration: none !important; /* Removes underline from links */
        }

        .category-link:hover {
            color: black !important; /* Keeps the text color black even on hover */
            text-decoration: none !important; /* Optionally, prevent underline on hover */
        }
        .form-control::placeholder {
            color: #ccc; /* Light gray; adjust as needed */
            opacity: 1; /* Firefox */
        }    
        .btn-highlighted {
            background-color: #ffc107; /* Bootstrap warning color */
            color: white; /* Adjust based on your design */
        }
        
    </style>   

    <script>
        document.addEventListener("DOMContentLoaded", function() {

            // Function to highlight buttons based on input state
            function highlightButtons() {
                document.querySelectorAll('.dropdown').forEach(dropdown => {
                    const button = dropdown.querySelector('.btn'); // Ensure correct class is used for button selection
                    // Check for active radio or number inputs
                    const isActiveRadioOrNumber = Array.from(dropdown.querySelectorAll('input[type="radio"], input[type="number"]')).some(input => input.type === "radio" ? input.checked : input.value.trim() !== '');
                    // Check for active checkboxes
                    const isActiveCheckbox = Array.from(dropdown.querySelectorAll('input[type="checkbox"]')).some(checkbox => checkbox.checked);
                    // Combine checks
                    const isActive = isActiveRadioOrNumber || isActiveCheckbox;
                    // Apply or remove highlighting
                    if (isActive) {
                        button.classList.add('btn-highlighted');
                    } else {
                        button.classList.remove('btn-highlighted');
                    }
                });
            }

            // Initial check to highlight buttons based on pre-filled values
            highlightButtons();

            // Function to update highlighting and active states upon input changes
            function setupInputListeners() {
                document.querySelectorAll('input').forEach(input => {
                    input.addEventListener('input', () => {
                        highlightButtons(); // Call the highlight function to update button states
                        
                    });
                });
            }

            // Setup listeners on all inputs
            setupInputListeners();

            // Example functions to toggle checkboxes directly from buttons
            document.getElementById('parkingButton').addEventListener('click', function() {
                const checkbox = document.getElementById('btncheck1');
                checkbox.checked = !checkbox.checked;
                highlightButtons(); // Update highlight state
                // Update active state for parking
            });

            document.getElementById('petsButton').addEventListener('click', function() {
                const checkbox = document.getElementById('btncheck2');
                checkbox.checked = !checkbox.checked;
                highlightButtons(); // Update highlight state
                // Update active state for pets
            });

        });
    </script>




</body>


